# Generated by Django 5.1.1 on 2024-10-31 12:12

import dashboard.models
import datetime
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('authentication', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseEventGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lead_start', models.DateField(default=django.utils.timezone.now, help_text='Setzen Sie fest, ab wann alle Eltern Termine anfragen können.')),
                ('lead_inquiry_start', models.DateField(default=django.utils.timezone.now, help_text='Setzen Sie fest, ab wann Anfragen der Lehrkräfte beantwortet werden können.')),
                ('valid_until', models.DateField(default=dashboard.models.BaseEventGroup.get_default_valid_until)),
                ('lead_status', models.IntegerField(choices=[(0, 'Niemand kann diesen Termin aktuell anfragen.'), (1, 'Nur Eltern mit besonderen Berechtigungen können diesen Termin aktuell anfragen.'), (2, 'Nur Eltern, die eine Anfrage der Lehrkraft bekommen haben, können diesen Termin aktuell anfragen.'), (3, 'Alle Eltern können diesen Termin aktuell anfragen.')], default=1)),
                ('lead_status_last_change', models.DateTimeField(default=django.utils.timezone.now)),
                ('force', models.BooleanField(default=False)),
                ('manual_apply', models.BooleanField(default=False)),
                ('disable_automatic_changes', models.BooleanField(default=False)),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
            ],
        ),
        migrations.CreateModel(
            name='SiteSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lead_start', models.DateField(default=django.utils.timezone.now, help_text='Setzen Sie fest, ab wann alle Eltern Termine anfragen können.')),
                ('lead_inquiry_start', models.DateField(default=django.utils.timezone.now, help_text='Setzen Sie fest, ab wann Anfragen der Lehrkräfte beantwortet werden können.')),
                ('event_duration', models.DurationField(default=datetime.timedelta(seconds=450), help_text='Hier legen Sie die allgemeine Länge eines Termins fest. Sie bezieht sich auf alle mit dieser Funktion erstellten Termine.')),
                ('min_event_seperation', models.DurationField(default=datetime.timedelta(seconds=300), help_text='Hier können Sie den Abstand zwischen zwei Terminen festlegen. Sie sollten etwas Zeit zum Wechseln der Räume usw. einplanen.')),
                ('event_in_seperation_bookable', models.BooleanField(default=False)),
                ('impressum', models.URLField(default='')),
                ('keep_events', models.DurationField(default=datetime.timedelta(days=30))),
                ('delete_events', models.BooleanField(default=True)),
                ('keep_student_changes', models.DurationField(default=datetime.timedelta(days=60))),
                ('delete_student_changes', models.BooleanField(default=False)),
                ('keep_announcements', models.DurationField(default=datetime.timedelta(days=30))),
                ('delete_announcements', models.BooleanField(default=True)),
                ('keep_event_change_formulas', models.DurationField(default=datetime.timedelta(days=30))),
                ('delete_event_change_formulas', models.BooleanField(default=False)),
                ('iquiry_bahvior', models.JSONField(default=dashboard.models.SiteSettings.get_default_inquiry_behavior)),
            ],
            options={
                'verbose_name': 'Seiteneinstellungen',
                'verbose_name_plural': 'Seiteneinstellungen',
            },
        ),
        migrations.CreateModel(
            name='Announcements',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('announcement_type', models.IntegerField(choices=[(0, 'Neue Buchungsanfrage'), (1, 'Terminabsage'), (2, 'Systembenachrichtigung')], default=0)),
                ('message', models.TextField(blank=True, null=True)),
                ('action_link', models.TextField(blank=True, null=True)),
                ('action_name', models.CharField(blank=True, max_length=200, null=True)),
                ('read', models.BooleanField(default=False)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Benachrichtigung',
                'verbose_name_plural': 'Benachrichtigungen',
            },
        ),
        migrations.CreateModel(
            name='DayEventGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('lead_start', models.DateField(default=django.utils.timezone.now, help_text='Setzen Sie fest, ab wann alle Eltern Termine anfragen können.')),
                ('lead_inquiry_start', models.DateField(default=django.utils.timezone.now, help_text='Setzen Sie fest, ab wann Anfragen der Lehrkräfte beantwortet werden können.')),
                ('lead_status', models.IntegerField(choices=[(0, 'Niemand kann diesen Termin aktuell anfragen.'), (1, 'Nur Eltern mit besonderen Berechtigungen können diesen Termin aktuell anfragen.'), (2, 'Nur Eltern, die eine Anfrage der Lehrkraft bekommen haben, können diesen Termin aktuell anfragen.'), (3, 'Alle Eltern können diesen Termin aktuell anfragen.')], default=1)),
                ('lead_status_last_change', models.DateTimeField(default=django.utils.timezone.now)),
                ('force', models.BooleanField(default=False)),
                ('manual_apply', models.BooleanField(default=False)),
                ('lead_manual_override', models.BooleanField(default=False)),
                ('disable_automatic_changes', models.BooleanField(default=False)),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('base_event', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.baseeventgroup')),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateTimeField(default=django.utils.timezone.now)),
                ('end', models.DateTimeField(default=django.utils.timezone.now)),
                ('lead_status', models.IntegerField(choices=[(0, 'Niemand kann diesen Termin aktuell anfragen.'), (1, 'Nur Eltern mit besonderen Berechtigungen können diesen Termin aktuell anfragen.'), (2, 'Nur Eltern, die eine Anfrage der Lehrkraft bekommen haben, können diesen Termin aktuell anfragen.'), (3, 'Alle Eltern können diesen Termin aktuell anfragen.')], default=1)),
                ('lead_status_last_change', models.DateTimeField(default=django.utils.timezone.now)),
                ('lead_manual_override', models.BooleanField(default=False)),
                ('disable_automatic_changes', models.BooleanField(default=False)),
                ('status', models.IntegerField(choices=[(0, 'Frei'), (1, 'Belegt'), (2, 'Anfrage ausstehend')], default=0)),
                ('occupied', models.BooleanField(default=False)),
                ('base_event', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.baseeventgroup')),
                ('day_group', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.dayeventgroup')),
                ('parent', models.ForeignKey(blank=True, default=None, limit_choices_to={'role': 0}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_parent', to=settings.AUTH_USER_MODEL)),
                ('student', models.ManyToManyField(blank=True, default=None, to='authentication.student')),
                ('teacher', models.ForeignKey(limit_choices_to={'role': 1}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Termin',
                'verbose_name_plural': 'Termine',
                'permissions': [('book_event', 'Dieser Nutzer darf Termin buchen. Ohne diese Berechtigung ist er komplett ausgeschlossen vom Buchen von Terminen.'), ('condition_prebook_event', 'Dieser Nutzer darf aus z.B. medizinischen Gründen einen Termin vor der offiziellen Buchungsphasen anfragen.'), ('book_double_event', 'Dieser Nutzer darf aus z.B. medizinischen Gründen auch Doppeltermine bei einer Lehrkraft anfragen.')],
            },
        ),
        migrations.CreateModel(
            name='Inquiry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(0, 'Anfrage zur Buchung eines Termins (Lehrer->Eltern)'), (1, 'Anfrage zur Bestätigung eines Termins (Eltern->Lehrer)')], default=0)),
                ('reason', models.TextField()),
                ('processed', models.BooleanField(default=False)),
                ('respondent_reaction', models.IntegerField(choices=[(0, 'Keine Antwort'), (1, 'Anfrage angenommen'), (3, 'Anfrage abgelehnt')], default=0)),
                ('notified', models.BooleanField(default=False)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('base_event', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.baseeventgroup')),
                ('event', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dashboard.event')),
                ('requester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_requester', to=settings.AUTH_USER_MODEL)),
                ('respondent', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_respondent', to=settings.AUTH_USER_MODEL)),
                ('students', models.ManyToManyField(to='authentication.student')),
            ],
            options={
                'verbose_name': 'Anfrage',
                'verbose_name_plural': 'Anfragen',
            },
        ),
        migrations.CreateModel(
            name='TeacherEventGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lead_start', models.DateField(default=django.utils.timezone.now, help_text='Setzen Sie fest, ab wann alle Eltern Termine anfragen können.')),
                ('lead_inquiry_start', models.DateField(default=django.utils.timezone.now, help_text='Setzen Sie fest, ab wann Anfragen der Lehrkräfte beantwortet werden können.')),
                ('lead_end_timedelta', models.DurationField(default=datetime.timedelta(seconds=3600))),
                ('lead_allow_same_day', models.BooleanField(default=True)),
                ('lead_status', models.IntegerField(choices=[(0, 'Niemand kann diesen Termin aktuell anfragen.'), (1, 'Nur Eltern mit besonderen Berechtigungen können diesen Termin aktuell anfragen.'), (2, 'Nur Eltern, die eine Anfrage der Lehrkraft bekommen haben, können diesen Termin aktuell anfragen.'), (3, 'Alle Eltern können diesen Termin aktuell anfragen.')], default=1)),
                ('lead_status_last_change', models.DateTimeField(default=django.utils.timezone.now)),
                ('force', models.BooleanField(default=False)),
                ('manual_apply', models.BooleanField(default=False)),
                ('lead_manual_override', models.BooleanField(default=False)),
                ('disable_automatic_changes', models.BooleanField(default=False)),
                ('room', models.CharField(blank=True, max_length=5, null=True)),
                ('day_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.dayeventgroup')),
                ('teacher', models.ForeignKey(limit_choices_to={'role': 1}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EventChangeFormula',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(0, 'Zeitfenster'), (1, 'Pausenantrag'), (2, 'Krankschreibung')], default=0)),
                ('date', models.DateField(default=django.utils.timezone.now, verbose_name='Datum')),
                ('start_time', models.TimeField(blank=True, null=True, verbose_name='Startzeitpunkt')),
                ('end_time', models.TimeField(blank=True, null=True, verbose_name='Endzeitpunkt')),
                ('no_events', models.BooleanField(default=False, verbose_name='Keine Termine')),
                ('status', models.IntegerField(choices=[(0, 'Warte auf Bearbeitung'), (1, 'Warte auf Bestätigung'), (2, 'Angenommen'), (3, 'Abgelehnt'), (4, 'Removed')], default=0)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('day_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.dayeventgroup')),
                ('parent_formular', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='childformular', to='dashboard.eventchangeformula')),
                ('teacher', models.ForeignKey(limit_choices_to={'role': 1}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Lehrkraft')),
                ('teacher_event_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.teachereventgroup')),
            ],
            options={
                'verbose_name': 'Terminerstellungsformular',
                'verbose_name_plural': 'Terminerstellungsformulare',
                'permissions': [('approve_disapprove', 'Kann eingereichte Zeiträume für andere User annehmen oder ablehnen.')],
            },
        ),
        migrations.AddField(
            model_name='event',
            name='teacher_event_group',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.teachereventgroup'),
        ),
    ]
