# Generated by Django 5.1.1 on 2024-10-31 12:12

import authentication.models
import colorfield.fields
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shield_id', models.CharField(max_length=38, unique=True)),
                ('first_name', models.CharField(max_length=48, verbose_name='Vorname')),
                ('last_name', models.CharField(max_length=48, verbose_name='Nachname')),
                ('child_email', models.EmailField(max_length=200, null=True, verbose_name='Email des Kindes')),
                ('class_name', models.CharField(default='', max_length=4, verbose_name='Klasse')),
                ('registered', models.BooleanField(default=False, verbose_name='Eltern des Kindes haben sich registriert.')),
            ],
            options={
                'verbose_name': 'Schüler*in',
                'verbose_name_plural': 'Schüler*innen',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, verbose_name='Tagname')),
                ('synonyms', models.TextField(blank=True, null=True, verbose_name='Synonyme')),
                ('color', colorfield.fields.ColorField(default=authentication.models.generate_new_color, image_field=None, max_length=25, samples=None, verbose_name='Farbe')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='E-Mail')),
                ('first_name', models.CharField(blank=True, default='', max_length=48, verbose_name='Vorname')),
                ('last_name', models.CharField(blank=True, default='', max_length=48, verbose_name='Nachname')),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('role', models.IntegerField(choices=[(0, 'Eltern'), (1, 'Lehrkraft'), (2, 'Anderes')], default=2, verbose_name='Rolle')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Beitrittsdatum')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('students', models.ManyToManyField(blank=True, to='authentication.student', verbose_name='Schüler*innen')),
            ],
            options={
                'verbose_name': 'Benutzer*innen',
                'verbose_name_plural': 'Benutzer',
            },
        ),
        migrations.CreateModel(
            name='StudentChange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operation', models.IntegerField(choices=[(0, 'no changes'), (1, 'Create new Student'), (2, 'Field Changes'), (3, 'Delete Student')], default=0)),
                ('shield_id', models.CharField(blank=True, max_length=38, null=True)),
                ('first_name', models.CharField(blank=True, max_length=48, null=True, verbose_name='Vorname')),
                ('last_name', models.CharField(blank=True, max_length=48, null=True, verbose_name='Nachname')),
                ('child_email', models.EmailField(blank=True, max_length=200, null=True, verbose_name='Email des Kindes')),
                ('class_name', models.CharField(blank=True, max_length=4, null=True, verbose_name='Klasse')),
                ('approved', models.BooleanField(default=False)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('applied', models.BooleanField(default=False)),
                ('applied_time', models.DateTimeField(blank=True, null=True)),
                ('student', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='authentication.student', verbose_name='Schüler*in')),
            ],
            options={
                'permissions': [('apply_changes', 'Kann Änderungen an Schüler*innen vornehmen')],
            },
        ),
        migrations.CreateModel(
            name='TeacherExtraData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('acronym', models.CharField(default='', max_length=3, verbose_name='Kürzel')),
                ('room', models.IntegerField(blank=True, null=True, verbose_name='Raum')),
                ('image', models.ImageField(default='default.jpg', upload_to='teacher_pics/', verbose_name='Profilbild')),
                ('tags', models.ManyToManyField(blank=True, to='authentication.tag', verbose_name='Tags')),
                ('teacher', models.OneToOneField(limit_choices_to={'role': 1}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Zugeordneter User der Lehrkraft')),
            ],
            options={
                'verbose_name': 'Zusätzliche Informationen zur Lehrkraft',
                'verbose_name_plural': 'Zusätzliche Informationen zu Lehrkräften',
            },
        ),
        migrations.CreateModel(
            name='Upcomming_User',
            fields=[
                ('user_token', models.CharField(default=authentication.models.generate_unique_code, max_length=12, primary_key=True, serialize=False, verbose_name='Usertoken')),
                ('access_key', models.CharField(default=authentication.models.generate_unique_code, max_length=12, verbose_name='Zugriffstoken')),
                ('otp', models.CharField(default=authentication.models.generate_unique_otp, max_length=6, verbose_name='Einmalkennwort')),
                ('otp_verified', models.BooleanField(default=False, verbose_name='Verifizierung des Einmalkennworts')),
                ('otp_verified_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Zeitpunkt der Verifizierung des Einmalkennworts')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Erstellungszeitpunkt')),
                ('email_send', models.BooleanField(default=False, verbose_name='E-Mail gesendet')),
                ('parent_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('parent_registration_email_send', models.BooleanField(default=False)),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='authentication.student', verbose_name='Schüler*in')),
            ],
            options={
                'verbose_name': 'Zukünftiger User',
                'verbose_name_plural': 'Zukünftige User',
                'permissions': (('send_up_user', 'Can send upcomming user'), ('send_up_user_batch', 'Can batch send upcomming user')),
            },
        ),
    ]
